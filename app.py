import streamlit as st
import joblib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Charger le mod√®le
model = joblib.load("model_diabetes.pkl")

st.set_page_config(page_title="Pr√©diction du diab√®te", layout="wide")

# === Onglets principaux ===
tab1, tab2, tab3, tab4 = st.tabs(["üîç Pr√©diction", "üìä Analyse exploratoire", "üìÇ Import CSV", "‚ÑπÔ∏è Explication"])

# ----------------- ONGLET 1 : PREDICTION -----------------
with tab1:
    st.header("üîç Pr√©diction du diab√®te")

    # Sidebar pour les param√®tres
    st.sidebar.header("‚öôÔ∏è Param√®tres m√©dicaux")
    age = st.sidebar.slider("√Çge", 1, 120, 30)
    gender = st.sidebar.selectbox("Sexe", ["Male", "Female"])
    polyuria = st.sidebar.selectbox("Polyurie", ["Yes", "No"])
    polydipsia = st.sidebar.selectbox("Polydipsie", ["Yes", "No"])
    sudden_weight_loss = st.sidebar.selectbox("Perte de poids soudaine", ["Yes", "No"])
    weakness = st.sidebar.selectbox("Faiblesse", ["Yes", "No"])
    polyphagia = st.sidebar.selectbox("Polyphagie (faim excessive)", ["Yes", "No"])
    genital_thrush = st.sidebar.selectbox("Mycose g√©nitale", ["Yes", "No"])
    visual_blurring = st.sidebar.selectbox("Vision trouble", ["Yes", "No"])
    itching = st.sidebar.selectbox("D√©mangeaisons", ["Yes", "No"])
    irritability = st.sidebar.selectbox("Irritabilit√©", ["Yes", "No"])
    delayed_healing = st.sidebar.selectbox("Cicatrisation retard√©e", ["Yes", "No"])
    partial_paresis = st.sidebar.selectbox("Paresie partielle", ["Yes", "No"])
    muscle_stiffness = st.sidebar.selectbox("Raideur musculaire", ["Yes", "No"])
    alopecia = st.sidebar.selectbox("Alop√©cie (perte de cheveux)", ["Yes", "No"])
    obesity = st.sidebar.selectbox("Ob√©sit√©", ["Yes", "No"])

    mapping = {"Yes": 1, "No": 0, "Male": 1, "Female": 0}
    features = np.array([[
        age,
        mapping[gender],
        mapping[polyuria],
        mapping[polydipsia],
        mapping[sudden_weight_loss],
        mapping[weakness],
        mapping[polyphagia],
        mapping[genital_thrush],
        mapping[visual_blurring],
        mapping[itching],
        mapping[irritability],
        mapping[delayed_healing],
        mapping[partial_paresis],
        mapping[muscle_stiffness],
        mapping[alopecia],
        mapping[obesity]
    ]])

    if st.button("‚ö° Lancer la pr√©diction"):
        prediction = model.predict(features)
        proba = model.predict_proba(features)[0][1]

        st.metric(label="Probabilit√© de diab√®te", value=f"{proba*100:.2f}%")

        if prediction[0] == 1:
            st.error("‚ö†Ô∏è Risque √©lev√© de diab√®te d√©tect√©.")
        else:
            st.success("‚úÖ Aucun risque de diab√®te d√©tect√©.")

        # Graphe matplotlib
        labels = ["Pas de diab√®te", "Diab√®te"]
        values = [1 - proba, proba]
        colors = ["green", "red"]

        fig, ax = plt.subplots(figsize=(6, 4))
        bars = ax.bar(labels, values, color=colors)

        for bar, val in zip(bars, values):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height(),
                    f"{val*100:.1f}%", ha="center", va="bottom", fontsize=12, fontweight="bold")

        ax.set_ylim(0, 1)
        ax.set_ylabel("Probabilit√©")
        ax.set_title("R√©sultat de la pr√©diction", fontsize=14, fontweight="bold", pad=20)

        st.pyplot(fig)


# ----------------- ONGLET 2 : ANALYSE EXPLORATOIRE -----------------
with tab2:
    st.header("üìä Analyse exploratoire des donn√©es saisies")
    st.markdown("Voici un aper√ßu et une analyse simple des donn√©es entr√©es par l‚Äôutilisateur.")

    input_data = {
        "Age": age,
        "Gender": gender,
        "Polyurie": polyuria,
        "Polydipsie": polydipsia,
        "Perte de poids": sudden_weight_loss,
        "Faiblesse": weakness,
        "Polyphagie": polyphagia,
        "Mycose g√©nitale": genital_thrush,
        "Vision trouble": visual_blurring,
        "D√©mangeaisons": itching,
        "Irritabilit√©": irritability,
        "Cicatrisation retard√©e": delayed_healing,
        "Paresie partielle": partial_paresis,
        "Raideur musculaire": muscle_stiffness,
        "Alop√©cie": alopecia,
        "Ob√©sit√©": obesity
    }

    df_input = pd.DataFrame([input_data])
    st.dataframe(df_input)

    st.write("üîé Cette table reprend toutes les caract√©ristiques fournies. Elle permet de v√©rifier la coh√©rence des donn√©es saisies avant la pr√©diction.")


# ----------------- ONGLET 3 : IMPORT CSV -----------------
with tab3:
    st.header("üìÇ Import d‚Äôun fichier CSV")
    uploaded_file = st.file_uploader("Importer un fichier CSV", type=["csv"])

    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.success("‚úÖ Fichier bien charg√©")
        st.write("Aper√ßu des donn√©es :")
        st.dataframe(df.head())

        st.write("Description statistique :")
        st.write(df.describe())


# ----------------- ONGLET 4 : EXPLICATION -----------------
with tab4:
    st.header("‚ÑπÔ∏è Explication de l‚Äôapplication")
    st.markdown("""
    Cette application a √©t√© d√©velopp√©e pour montrer comment des donn√©es m√©dicales peuvent √™tre utilis√©es pour **pr√©dire le risque de diab√®te** gr√¢ce au Machine Learning.  

    - **Onglet 1 : Pr√©diction** ‚Üí permet √† l‚Äôutilisateur d‚Äôentrer ses informations et d‚Äôobtenir une estimation du risque.  
    - **Onglet 2 : Analyse exploratoire** ‚Üí permet de visualiser et analyser les donn√©es saisies.  
    - **Onglet 3 : Import CSV** ‚Üí permet d‚Äôanalyser un fichier de donn√©es complet (utile pour les m√©decins ou chercheurs).  
    - **Onglet 4 : Explication** ‚Üí d√©crit l‚Äôobjectif p√©dagogique et m√©dical de l‚Äôapplication.  

    ‚ö†Ô∏è Remarque : cette application n‚Äôest pas un diagnostic m√©dical officiel mais un outil de **sensibilisation** et de **support √† la d√©cision**.
    """)

