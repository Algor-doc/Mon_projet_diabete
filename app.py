import streamlit as st
import joblib
import numpy as np
import matplotlib.pyplot as plt

# Charger le mod√®le
model = joblib.load("model_diabetes.pkl")

st.set_page_config(page_title="Pr√©diction du diab√®te", layout="wide")

# Navigation dans la sidebar
menu = st.sidebar.radio(
    "üìå Navigation",
    ["üè† Accueil", "üîç Pr√©diction", "üìä Analyse des r√©sultats", "‚ÑπÔ∏è Explication de l‚Äôapplication"]
)

# === PAGE 1 : Accueil ===
if menu == "üè† Accueil":
    st.title("ü©∫ Application de pr√©diction du diab√®te")
    st.markdown("""
    Bienvenue dans cette application.  
    Elle utilise un mod√®le de Machine Learning pour estimer le risque de diab√®te √† partir de donn√©es m√©dicales.  
    Naviguez dans le menu √† gauche pour tester une pr√©diction, analyser les r√©sultats ou comprendre l‚Äôobjectif global de l‚Äôoutil.
    """)

# === PAGE 2 : Pr√©diction ===
elif menu == "üîç Pr√©diction":
    st.title("üîç Faire une pr√©diction")

    st.sidebar.subheader("‚öôÔ∏è Param√®tres m√©dicaux")
    age = st.sidebar.slider("√Çge", 1, 120, 30)
    gender = st.sidebar.selectbox("Sexe", ["Male", "Female"])
    polyuria = st.sidebar.selectbox("Polyurie", ["Yes", "No"])
    polydipsia = st.sidebar.selectbox("Polydipsie", ["Yes", "No"])
    sudden_weight_loss = st.sidebar.selectbox("Perte de poids soudaine", ["Yes", "No"])
    weakness = st.sidebar.selectbox("Faiblesse", ["Yes", "No"])
    polyphagia = st.sidebar.selectbox("Polyphagie (faim excessive)", ["Yes", "No"])
    genital_thrush = st.sidebar.selectbox("Mycose g√©nitale", ["Yes", "No"])
    visual_blurring = st.sidebar.selectbox("Vision trouble", ["Yes", "No"])
    itching = st.sidebar.selectbox("D√©mangeaisons", ["Yes", "No"])
    irritability = st.sidebar.selectbox("Irritabilit√©", ["Yes", "No"])
    delayed_healing = st.sidebar.selectbox("Cicatrisation retard√©e", ["Yes", "No"])
    partial_paresis = st.sidebar.selectbox("Paresie partielle", ["Yes", "No"])
    muscle_stiffness = st.sidebar.selectbox("Raideur musculaire", ["Yes", "No"])
    alopecia = st.sidebar.selectbox("Alop√©cie (perte de cheveux)", ["Yes", "No"])
    obesity = st.sidebar.selectbox("Ob√©sit√©", ["Yes", "No"])

    mapping = {"Yes": 1, "No": 0, "Male": 1, "Female": 0}
    features = np.array([[
        age,
        mapping[gender],
        mapping[polyuria],
        mapping[polydipsia],
        mapping[sudden_weight_loss],
        mapping[weakness],
        mapping[polyphagia],
        mapping[genital_thrush],
        mapping[visual_blurring],
        mapping[itching],
        mapping[irritability],
        mapping[delayed_healing],
        mapping[partial_paresis],
        mapping[muscle_stiffness],
        mapping[alopecia],
        mapping[obesity]
    ]])

    if st.button("‚ö° Lancer la pr√©diction"):
        prediction = model.predict(features)
        proba = model.predict_proba(features)[0][1]

        st.metric(label="Probabilit√© de diab√®te", value=f"{proba*100:.2f}%")

        if prediction[0] == 1:
            st.error("‚ö†Ô∏è Risque √©lev√© de diab√®te d√©tect√©.")
        else:
            st.success("‚úÖ Aucun risque de diab√®te d√©tect√©.")

        # Graphe uniquement ici
        labels = ["Pas de diab√®te", "Diab√®te"]
        values = [1 - proba, proba]
        colors = ["green", "red"]

        fig, ax = plt.subplots(figsize=(6, 4))
        bars = ax.bar(labels, values, color=colors)

        for bar, val in zip(bars, values):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height(),
                    f"{val*100:.1f}%", ha="center", va="bottom", fontsize=12, fontweight="bold")

        ax.set_ylim(0, 1)
        ax.set_ylabel("Probabilit√©")
        ax.set_title("R√©sultat de la pr√©diction", fontsize=14, fontweight="bold", pad=20)

        st.pyplot(fig)

# === PAGE 3 : Analyse des r√©sultats ===
elif menu == "üìä Analyse des r√©sultats":
    st.title("üìä Analyse des r√©sultats")
    st.markdown("""
    Les r√©sultats du graphe pr√©c√©dent permettent de comprendre le niveau de risque.  
    - **Barre verte (Pas de diab√®te)** : indique la probabilit√© estim√©e que la personne soit saine.  
    - **Barre rouge (Diab√®te)** : montre la probabilit√© que la personne soit diab√©tique selon les donn√©es fournies.  

    Cette analyse aide √† visualiser l‚Äô√©quilibre entre les deux probabilit√©s.  
    Une probabilit√© √©lev√©e du c√¥t√© rouge est une alerte, tandis qu‚Äôune forte proportion de vert rassure sur l‚Äôabsence de risque imm√©diat.  
    """)

# === PAGE 4 : Explication de l‚Äôapplication ===
elif menu == "‚ÑπÔ∏è Explication de l‚Äôapplication":
    st.title("‚ÑπÔ∏è Explication de l‚Äôapplication")
    st.markdown("""
    Cette application a √©t√© con√ßue dans un objectif p√©dagogique et m√©dical.  
    Elle permet :  
    - d‚Äôillustrer comment des donn√©es m√©dicales simples peuvent √™tre utilis√©es dans un mod√®le de Machine Learning,  
    - de fournir une estimation rapide et visuelle du risque de diab√®te,  
    - d‚Äôexplorer les possibilit√©s d‚Äôoutils interactifs pour aider au **d√©pistage pr√©coce**.  

    ‚ö†Ô∏è Elle ne remplace pas un avis m√©dical : elle doit √™tre consid√©r√©e comme un **outil de sensibilisation et de support**, non comme un diagnostic m√©dical officiel.  
    """)

